package com.lanayago.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.tags.Tag;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

@Configuration
public class OpenApiConfig {

	@Value("${server.port:8080}")
	private String serverPort;

	@Value("${app.version:1.0.0}")
	private String appVersion;

	@Bean
	public OpenAPI customOpenAPI() {
		return new OpenAPI()
				.info(apiInfo())
				.servers(List.of(
						localServer(),
						productionServer()
				))
				.tags(List.of(
//						authTag(),
//						commandesTag(),
//						vehiculesTag(),
//						geolocationTag(),
//						clientsTag(),
//						chauffeursTag(),
//						documentsTag(),
//						adminTag()
				))
				.components(securityComponents())
				.addSecurityItem(securityRequirement());
	}

	private Info apiInfo() {
		return new Info()
				.title("üöö LanaYaGo API")
				.description("""
                        **API REST pour la plateforme de transport LanaYaGo**
                        
                        Cette API permet de g√©rer :
                        - üë§ **Authentification** des clients, chauffeurs et propri√©taires
                        - üìç **G√©olocalisation** temps r√©el avec Google Maps
                        - üì¶ **Commandes** de transport avec g√©olocalisation
                        - üöõ **V√©hicules** et gestion de flotte
                        - üë• **Gestion des utilisateurs** (clients et chauffeurs)
                        - üìÑ **Documents** et validation administrative
                        - ‚≠ê **√âvaluations** et syst√®me de notation
                        - üí∞ **Tarification** dynamique
                        - ‚öôÔ∏è **Administration** et statistiques
                        
                        ## üîê Authentification
                        
                        L'API utilise **JWT Bearer Token** pour l'authentification.
                        
                        ### √âtapes pour s'authentifier :
                        1. **Inscription** : `POST /api/auth/register`
                        2. **Connexion** : `POST /api/auth/login`
                        3. **Utiliser le token** : Ajouter `Authorization: Bearer <token>` dans les headers
                        
                        ## üë• Types d'utilisateurs
                        
                        - **CLIENT** : Peut cr√©er et suivre des commandes, g√©rer son profil
                        - **CHAUFFEUR** : Peut accepter et traiter des commandes, g√©rer sa disponibilit√©
                        - **PROPRIETAIRE_VEHICULE** : Peut g√©rer sa flotte, ses chauffeurs et acc√©der aux fonctions admin
                        
                        ## üîÑ Flux d'utilisation
                        
                        ### Pour un client :
                        1. S'inscrire comme CLIENT
                        2. Cr√©er une commande avec g√©olocalisation
                        3. Suivre l'√©volution de la commande
                        4. √âvaluer le service
                        
                        ### Pour un chauffeur :
                        1. S'inscrire comme CHAUFFEUR
                        2. √ätre assign√© √† un propri√©taire de v√©hicule
                        3. Accepter des commandes disponibles
                        4. Mettre √† jour sa position et le statut des commandes
                        
                        ### Pour un propri√©taire :
                        1. S'inscrire comme PROPRIETAIRE_VEHICULE
                        2. Ajouter des v√©hicules √† sa flotte
                        3. G√©rer ses chauffeurs
                        4. Acc√©der aux statistiques et √† l'administration
                        
                        ## üì± Int√©gration Mobile
                        
                        Cette API est con√ßue pour √™tre consomm√©e par :
                        - Applications mobiles (iOS/Android)
                        - Applications web (Angular/React/Vue.js)
                        - Syst√®mes tiers via REST
                        - Notifications temps r√©el via WebSocket
                        
                        ## üåê WebSocket
                        
                        Connexion WebSocket disponible sur `/ws` pour :
                        - Notifications de nouvelles commandes
                        - Mises √† jour de statut en temps r√©el
                        - Suivi g√©olocalisation temps r√©el
                        """)
				.version(appVersion)
				.contact(apiContact())
				.license(apiLicense());
	}

	private Contact apiContact() {
		return new Contact()
				.name("√âquipe LanaYaGo")
				.email("contact@lanayago.com")
				.url("https://lanayago.com");
	}

	private License apiLicense() {
		return new License()
				.name("Propri√©taire - LanaYaGo")
				.url("https://lanayago.com/licence");
	}

	private Server localServer() {
		return new Server()
				.url("http://localhost:" + serverPort)
				.description("üñ•Ô∏è Serveur de d√©veloppement local");
	}

	private Server productionServer() {
		return new Server()
				.url("https://api.lanayago.com")
				.description("üåê Serveur de production");
	}



	// Configuration de la s√©curit√© JWT
	private Components securityComponents() {
		return new Components()
				.addSecuritySchemes("bearerAuth", jwtSecurityScheme());
	}

	private SecurityScheme jwtSecurityScheme() {
		return new SecurityScheme()
				.type(SecurityScheme.Type.HTTP)
				.scheme("bearer")
				.bearerFormat("JWT")
				.description("""
                        **Token JWT Bearer**
                        
                        Pour obtenir un token :
                        1. Cr√©ez un compte : `POST /api/auth/register`
                        2. Connectez-vous : `POST /api/auth/login`
                        3. Utilisez le token retourn√© dans le header Authorization
                        
                        Format : `Authorization: Bearer <votre-token>`
                        
                        **Dur√©e de validit√©** : 24 heures
                        **Refresh Token** : 7 jours
                        
                        **Exemple d'utilisation** :
                        ```
                        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                        ```
                        """);
	}

	private SecurityRequirement securityRequirement() {
		return new SecurityRequirement()
				.addList("bearerAuth");
	}
}